# -*- coding: utf-8 -*-
"""Tata IPL Score Predictor

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nKl-gKO5x4iICAN42kFm2rkgD1hXeNZs
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

ipl_data= pd.read_csv('/content/ipl_data.csv')

ipl_data

ipl_data.info()

# converting data type of 'date' from object to date

ipl_data['date'] = pd.to_datetime(ipl_data['date'])

ipl_data['date'], ipl_data['date'].dtype

ipl_data.isnull().sum()

sns.displot(ipl_data['wickets'], bins =10)
plt.title("Wicket Distribution")
plt.show()

sns.displot(ipl_data['total'], bins =10)
plt.title("Runs Distribution")
plt.show()

"""We can conclude that it is normal distribution

# **Proceeding towards Data Cleaning Phase**

**Since we are going to predict the overall 20 over score we wont need following variables: **




1.   Mid
2.   Date
3. Venue
4. Batsman
5. Bowler
6. Striker
7. Non- Striker
"""

ipl_data.columns

# seperating not so necessary features

irr = ipl_data[['mid', 'date', 'venue', 'batsman', 'bowler','striker','non-striker']]
irr.head(), irr.shape

ipl_data = ipl_data.drop(irr, axis =1)
ipl_data.head(), ipl_data.shape

"""Removing new teams from Data as they have not made any significant contribution and there instances are comparetively less.

Therefore, here we are classifying teams into 2 categories: Consistent and Inconsistent Teams
"""

consistent_teams = ipl_data['bowl_team'].append(ipl_data['bat_team']).unique()
consistent_teams

"""Removing first 5 overs of every match"""

ipl_data = ipl_data[ipl_data['overs']>=5.0]
ipl_data

"""Finding Correlation

"""

from seaborn import heatmap
heatmap(data = ipl_data.corr(),annot = True)

"""**Data Preprocessing**

Label Encoding
"""

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
le = LabelEncoder()

for col in ['bat_team', 'bowl_team']:
  ipl_data[col] = le.fit_transform(ipl_data[col])
ipl_data.head()

"""One Hot Encoding"""

from sklearn.compose import ColumnTransformer
columnTransformer = ColumnTransformer([('encoder',OneHotEncoder(),[0,1])], remainder = 'passthrough')

ipl_data

ipl_data = np.array(columnTransformer.fit_transform(ipl_data))

ipl_data.shape

ipl_data

"""**Saving numpy array in new DF with transformed cols**"""

consistent_teams

batting_teams = ['batting_team_'+ team for team in consistent_teams]
batting_teams

bowling_teams = ['bowling_team_'+ team for team in consistent_teams]
bowling_teams

cols = batting_teams + bowling_teams
#runs + "wickets' + 'overs' + 'runs_last_5'+ 'wickets_last_5'+ 'total'
cols

len(cols)

add_cols = ["runs" , "wickets" , "overs" , "runs_last_5" , "wickets_last_5" , "total"]

final_cols = cols+ add_cols
final_cols, len(final_cols)

final_cols.remove("bowling_team_Rajas")

len(final_cols)

final_df = pd.DataFrame(ipl_data, columns = final_cols)

"""Final Data Frame"""

final_df

"""# **Model Building**"""

x = final_df.drop(['total'],axis=1) # Dependent Variables for final score
y = final_df['total']  #Final Score

x

y

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state = 42, shuffle = True)

print(x_train.shape, x_test.shape,y_train.shape, y_test.shape )

models = dict()

#1 Decision Tree

from sklearn.tree import DecisionTreeRegressor
tree = DecisionTreeRegressor()

tree.fit(x_train, y_train)

# DT Evaluation

train_score_DT = str(tree.score(x_train,y_train)*100)
test_score_DT = str(tree.score(x_test,y_test)*100)

print("Train Score: ",train_score_DT, print("Test Score: ",test_score_DT))
models["tree"] = test_score_DT

#2  Linear Regression

from sklearn.linear_model import LinearRegression

linereg = LinearRegression()

linereg.fit(x_train, y_train)

# Linear Regression Evaluation

train_score_LR = str(linereg.score(x_train,y_train)*100)
test_score_LR = str(linereg.score(x_test,y_test)*100)

print("Train Score: ",train_score_LR, print("Test Score: ",test_score_LR))
models["linereg"] = test_score_LR

# 3 Random Forest Regression

from sklearn.ensemble import RandomForestRegressor

forest = RandomForestRegressor()

forest.fit(x_train,y_train)

# Random Forest Evaluation

train_score_Forest = str(forest.score(x_train,y_train)*100)
test_score_Forest = str(forest.score(x_test,y_test)*100)

print("Train Score: ",train_score_Forest, print("Test Score: ",test_score_Forest))
models["forest"] = test_score_Forest

# 4 Support Vector Machine

from sklearn.svm import SVR

svm = SVR()

svm.fit(x_train,y_train)

# SVMt Evaluation

train_score_svm = str(svm.score(x_train,y_train)*100)
test_score_svm = str(svm.score(x_test,y_test)*100)

print("Train Score: ",train_score_svm, print("Test Score: ",test_score_svm))
models["svm"] = test_score_svm

# 5 XGBRegressor 

from xgboost import XGBRegressor

xgb = XGBRegressor()

xgb.fit(x_train, y_train)

# XGB Evaluation

train_score_xgb = str(xgb.score(x_train,y_train)*100)
test_score_xgb = str(xgb.score(x_test,y_test)*100)

print("Train Score: ",train_score_xgb, print("Test Score: ",test_score_xgb))
models["xgb"] = test_score_xgb

# Comparison

model_names = list(models.keys())
accuracy = list(map(float, models.values()))

plt.bar(model_names, accuracy)

"""From above we can say that **XGB** performed the best followed by **Random Forest**. Therefore we will keep **XGB** as our **final model**

# **Predictions**
"""

def score_predict(batting_team, bowling_team, runs, wickets, overs, runs_last_5, wickets_last_5, model = xgb):
  
    prediction_array = []
      # Batting Team
    if batting_team == 'Chennai Super Kings':
        prediction_array = prediction_array + [1,0,0,0,0,0,0,0]
    elif batting_team == 'Delhi Daredevils':
        prediction_array = prediction_array + [0,1,0,0,0,0,0,0]
    elif batting_team == 'Kings XI Punjab':
        prediction_array = prediction_array + [0,0,1,0,0,0,0,0]
    elif batting_team == 'Kolkata Knight Riders':
        prediction_array = prediction_array + [0,0,0,1,0,0,0,0]
    elif batting_team == 'Mumbai Indians':
        prediction_array = prediction_array + [0,0,0,0,1,0,0,0]
    elif batting_team == 'Rajasthan Royals':
        prediction_array = prediction_array + [0,0,0,0,0,1,0,0]
    elif batting_team == 'Royal Challengers Bangalore':
        prediction_array = prediction_array + [0,0,0,0,0,0,1,0]
    elif batting_team == 'Sunrisers Hyderabad':
        prediction_array = prediction_array + [0,0,0,0,0,0,0,1]
    

    # Bowling Team
    if bowling_team == 'Chennai Super Kings':
        prediction_array = prediction_array + [1,0,0,0,0,0,0,0]
    elif bowling_team == 'Delhi Daredevils':
        prediction_array = prediction_array + [0,1,0,0,0,0,0,0]
    elif bowling_team == 'Kings XI Punjab':
        prediction_array = prediction_array + [0,0,1,0,0,0,0,0]
    elif bowling_team == 'Kolkata Knight Riders':
        prediction_array = prediction_array + [0,0,0,1,0,0,0,0]
    elif bowling_team == 'Mumbai Indians':
        prediction_array = prediction_array + [0,0,0,0,1,0,0,0]
    elif bowling_team == 'Rajasthan Royals':
        prediction_array = prediction_array + [0,0,0,0,0,1,0,0]
    elif bowling_team == 'Royal Challengers Bangalore':
        prediction_array = prediction_array + [0,0,0,0,0,0,1,0]
    elif bowling_team == 'Sunrisers Hyderabad':
        prediction_array = prediction_array + [0,0,0,0,0,0,0,1]
        
    prediction_array = prediction_array + [0,0,0,0,0,0,0,1]

    prediction_array = prediction_array + [runs, wickets, overs, runs_last_5, wickets_last_5]
    prediction_array = np.array([prediction_array])
    pred = model.predict(prediction_array)

    return int(round(pred[0]))

"""**Testing of model**"""

# Test 1

batting_team = 'Mumbai Indians'
bowling_team = 'Chennai Super Kings'
score = score_predict(batting_team, bowling_team, runs = 68, wickets = 3, overs = 10.2, runs_last_5 = 29, wickets_last_5 = 1)
print(score)

import pickle
filename = "/content/ipl_score_predictor_model.pkl"
pickle.dump(forest, open(filename,"wb"))

